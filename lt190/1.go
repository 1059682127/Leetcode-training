package lt190


// 颠倒二进制位

//颠倒给定的 32 位无符号整数的二进制位。
//
// 
//
//示例 1：
//
//输入: 00000010100101000001111010011100
//输出: 00111001011110000010100101000000
//解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
//示例 2：
//
//输入：11111111111111111111111111111101
//输出：10111111111111111111111111111111
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
// 
//
//提示：
//
//请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
//在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
// 
//
//进阶:
//如果多次调用这个函数，你将如何优化你的算法？
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/reverse-bits
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


// 思路：
// 1. 直接想到将num的位取出去，倒给另一个数num1.
		// 可以将num的位给导出到一个切片中，对切片作逆转，再表示为位
		// 或者每取一位出来，判断0,1，再移对应位数和num1加或者或
// * 思考：倒转后要注意uint32整型溢出问题吗？答案是不用，有符号整型才需要考虑溢出

// 1. 将num倒给num1
//600/600 cases passed (0 ms)
//Your runtime beats 100 % of golang submissions
//Your memory usage beats 20 % of golang submissions (2.5 MB)
func reverseBits(num uint32) uint32 {
	var num1 uint32 = 0
	var bit uint32 = 0
	for num != 0 {
		bit++
		if num & 1 == 1 {
			num1 = num1 | 1<<(32-bit)
		}
		num = num >> 1
	}
	return num1
}


// 这种思路是将
func reverseBits2(num uint32) uint32 {
	var num1 uint32 = 0
	for i:=0; i<32; i++ {
		num1 = num1<<1 + 1 & num
		num >>= 1
	}
	return num1
}