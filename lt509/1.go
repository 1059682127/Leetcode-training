package lt509


// 斐波那契数

//斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：
//
//F(0) = 0,   F(1) = 1
//F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
//给定 N，计算 F(N)。
//
// 
//
//示例 1：
//
//输入：2
//输出：1
//解释：F(2) = F(1) + F(0) = 1 + 0 = 1.
//示例 2：
//
//输入：3
//输出：2
//解释：F(3) = F(2) + F(1) = 1 + 1 = 2.
//示例 3：
//
//输入：4
//输出：3
//解释：F(4) = F(3) + F(2) = 2 + 1 = 3.
// 
//
//提示：
//
//0 ≤ N ≤ 30
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/fibonacci-number
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


// 一般这种题做法优化路线都是 递归->递归加备忘录->动态规划

// 首先找到 状态转移方程 也就是暴力解的公式
// f0 = 0; f1 = 1; fn = f(n-1) + f(n-2)
// 这里就是最优子结构 (原问题的解由子问题的最优解构成，且子问题间相互独立)

func fib(N int) int {
	if N<=1 {return N}

	f0, f1, f2 := 0, 1, 0
	for i:=2; i<=N; i++ {
		f2 = f0 + f1
		f0, f1 = f1, f2
	}
	return f2
}
