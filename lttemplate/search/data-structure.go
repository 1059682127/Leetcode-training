package search

// 这里的搜索主要指 树、图、状态集 中搜索某一个值

// 以二叉树为例，最容易想到的就是遍历搜索，使用递归实现，
// 对于每一个节点先查其左子节点，再查其右子节点。最后就是先遍历了根节点左子树，再遍历根节点的右子树。

// 搜索-遍历 的要求是：
// 1. 每个节点都要访问一遍
// 2. 仅访问一遍 （避免误用访问）
// 3. 节点的访问顺序不限
// 		根据访问顺序可分为：
//			(1) 深度优先搜索
//			(2) 广度优先搜索
//			(3) 按优先级搜索
// 			... 当然也可以制定自己的搜索顺序，但是一定得是有实际场景需要才会去这么做

// 树节点的定义
type TreeNode struct {
	val int
	left, right *TreeNode
}

// 工厂方法
func Node(val int) *TreeNode {
	return &TreeNode{
		val:val,
	}
}
