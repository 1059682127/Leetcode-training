//lt297

/*
寻找重复数

给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
示例 1:
输入: [1,3,4,2,2]
输出: 2
示例 2:
输入: [3,1,3,4,2]
输出: 3
说明：
不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。
//思路1：哈希表，O(N)/O(N)
//思路2：sort+指针，更改了原数组
//思路3：快慢指针
*/




class Solution {
public:
	//思路1：哈希表，O(N)/O(N)
	//思路2：sort+指针，更改了原数组
	//思路3：快慢指针
	//把数组当成链表来看，把数组的下标看成是指向元素的指针，把数组的元素也看成是指针，如下标为0，指向nums[0]，nums[0] = 1指向nums[1]...
	//这样当有重复元素的时候链表就会成环，问题就变成求链表环的入口
	//用快慢指针，相遇的时候快指针多走了n步，（n%c == 0）,c为环长，这时候第三指针finder从起点开始跟慢指针同步走，两指针相遇处即为环入口
	int findDuplicate(vector<int>& nums) {
		//快慢指针前进
		int fast = 0, slow = 0;
		do {
			slow = nums[slow];
			fast = nums[nums[fast]];
		} while (fast != slow);
		//第三指针从起点开始
		int finder = 0;
		while (finder != slow) {
			slow = nums[slow];
			finder = nums[finder];
		}
		return slow;
	}
};